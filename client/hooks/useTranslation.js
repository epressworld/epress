"use client"

import { useLanguage } from "../contexts/LanguageContext"

export const useTranslation = () => {
  const { t } = useLanguage()

  return {
    t,
    // 常用翻译的快捷方法
    common: {
      confirm: () => t("common.confirm"),
      save: () => t("common.save"),
      edit: () => t("common.edit"),
      delete: () => t("common.delete"),
      back: () => t("common.back"),
      goHome: () => t("common.goHome"),
      submit: () => t("common.submit"),
      yes: () => t("common.yes"),
      no: () => t("common.no"),
      error: () => t("common.error"),
      success: () => t("common.success"),
      warning: () => t("common.warning"),
      retry: () => t("common.retry"),
      noMore: () => t("common.noMore"),
      loadMore: () => t("common.loadMore"),
      noComments: () => t("common.noComments"),
      pleaseRetry: () => t("common.pleaseRetry"),
      pleaseLoginFirst: () => t("common.pleaseLoginFirst"),
      onlyNodeOwnerCan: () => t("common.onlyNodeOwnerCan"),
      operationSuccess: () => t("common.operationSuccess"),
      operationFailed: () => t("common.operationFailed"),
      deleteSuccess: () => t("common.deleteSuccess"),
      deleteFailed: () => t("common.deleteFailed"),
      signSuccess: () => t("common.signSuccess"),
      signFailed: () => t("common.signFailed"),
      publishSuccess: () => t("common.publishSuccess"),
      publishFailed: () => t("common.publishFailed"),
      updateSuccess: () => t("common.updateSuccess"),
      updateFailed: () => t("common.updateFailed"),
      submitSuccess: () => t("common.submitSuccess"),
      submitFailed: () => t("common.submitFailed"),
      loadMoreFailed: () => t("common.loadMoreFailed"),
      nodeAddressNotAvailable: () => t("common.nodeAddressNotAvailable"),
      pleaseConnectWallet: () => t("common.pleaseConnectWallet"),
      waitingForWallet: () => t("common.waitingForWallet"),
      deleteRequestSent: () => t("common.deleteRequestSent"),
      fileUploadNotImplemented: () => t("common.fileUploadNotImplemented"),
      contentUpdateSuccess: () => t("common.contentUpdateSuccess"),
      contentUpdateError: () => t("common.contentUpdateError"),
      saveEditError: () => t("common.saveEditError"),
      onlyNodeOwnerCanSign: () => t("common.onlyNodeOwnerCanSign"),
      onlyNodeOwnerCanDelete: () => t("common.onlyNodeOwnerCanDelete"),
      onlyNodeOwnerCanPublish: () => t("common.onlyNodeOwnerCanPublish"),
      pleaseLoginAndConfirmOwner: () => t("common.pleaseLoginAndConfirmOwner"),
      confirmDeleteContent: () => t("common.confirmDeleteContent"),
      verificationFailed: () => t("common.verificationFailed"),
      returnHome: () => t("common.returnHome"),
      pleaseWaitProcessing: () => t("common.pleaseWaitProcessing"),
      operationCompleted: () => t("common.operationCompleted"),
      viewComment: () => t("common.viewComment"),
      viewPublication: () => t("common.viewPublication"),
      viewArticle: () => t("common.viewArticle"),
      viewDetails: () => t("common.viewDetails"),
      commentLocation: () => t("common.commentLocation"),
      commentLocationDescription: () => t("common.commentLocationDescription"),
      publicationLocation: () => t("common.publicationLocation"),
      publicationLocationDescription: () =>
        t("common.publicationLocationDescription"),
      unknown: () => t("common.unknown"),
      days: () => t("common.days"),
      since: () => t("common.since"),
      epressVersion: () => t("common.epressVersion"),
      version: () => t("common.version"),
      online: () => t("common.online"),
      onlineDays: (days) => t("common.onlineDays", days),
      sinceWithTime: (time) => t("common.sinceWithTime", time),
      daysWithCount: (count) => t("common.daysWithCount", count),
      ethereumAddress: () => t("common.ethereumAddress"),
      installTime: () => t("common.installTime"),
      runningDays: () => t("common.runningDays"),
      sinceLastStart: () => t("common.sinceLastStart"),
      commentContent: () => t("common.commentContent"),
      preparingVerification: () => t("common.preparingVerification"),
      parsingVerificationLink: () => t("common.parsingVerificationLink"),
      displayName: () => t("common.displayName"),
      displayNamePlaceholder: () => t("common.displayNamePlaceholder"),
      nickname: () => t("common.nickname"),
      nicknamePlaceholder: () => t("common.nicknamePlaceholder"),
      nicknameRequired: () => t("common.nicknameRequired"),
      displayNameRequired: () => t("common.displayNameRequired"),
      emailAddress: () => t("common.emailAddress"),
      emailAddressPlaceholder: () => t("common.emailAddressPlaceholder"),
      emailAddressRequired: () => t("common.emailAddressRequired"),
      emailFormatIncorrect: () => t("common.emailFormatIncorrect"),
      uploadFileAndAddDescription: () =>
        t("common.uploadFileAndAddDescription"),
      addFileDescription: () => t("common.addFileDescription"),
      emailAuth: () => t("common.emailAuth"),
      ethereumAuth: () => t("common.ethereumAuth"),
      walletConnected: () => t("common.walletConnected"),
      walletNotConnected: () => t("common.walletNotConnected"),
      preview: () => t("common.preview"),
      selected: () => t("common.selected"),
      size: () => t("common.size"),
      removeFile: () => t("common.removeFile"),
      clickToSelectFile: () => t("common.clickToSelectFile"),
      supportAllFormats: () => t("common.supportAllFormats"),
      supportImageFormats: () => t("common.supportImageFormats"),
      supportAllFormatsShort: () => t("common.supportAllFormatsShort"),
      selectLanguage: () => t("common.selectLanguage"),
      image: () => t("common.image"),
      all: () => t("common.all"),
      loading: () => t("common.loading"),
      loadFailed: () => t("common.loadFailed"),
      contentNotExists: () => t("common.contentNotExists"),
      comments: () => t("common.comments"),
      confirmDelete: () => t("common.confirmDelete"),
      confirmDeleteMessage: () => t("common.confirmDeleteMessage"),
      confirmDeleteText: () => t("common.confirmDeleteText"),
      cancel: () => t("common.cancel"),
      signatureInfo: () => t("common.signatureInfo"),
      signatureHash: () => t("common.signatureHash"),
      signerAddress: () => t("common.signerAddress"),
      signatureData: () => t("common.signatureData"),
      signatureTime: () => t("common.signatureTime"),
      signatureMessage: () => t("common.signatureMessage"),
      proofOfSource: () => t("common.proofOfSource"),
      statementOfSource: () => t("common.statementOfSource"),
      signature: () => t("common.signature"),
      close: () => t("common.close"),
      pageTitle: {
        home: () => t("common.pageTitle.home"),
        connections: () => t("common.pageTitle.connections"),
        contentDetail: () => t("common.pageTitle.contentDetail"),
        verificationFailed: () => t("common.pageTitle.verificationFailed"),
        verificationProcessing: () =>
          t("common.pageTitle.verificationProcessing"),
        verificationSuccess: () => t("common.pageTitle.verificationSuccess"),
      },
      missingRequiredParameter: () => t("common.missingRequiredParameter"),
      cannotFindContent: () => t("common.cannotFindContent"),
      contentNotFoundDescription: () => t("common.contentNotFoundDescription"),
      redirectingToDetailPage: () => t("common.redirectingToDetailPage"),
      processing: () => t("common.processing"),
    },
    navigation: {
      content: () => t("navigation.content"),
      connections: () => t("navigation.connections"),
      home: () => t("navigation.home"),
    },
    auth: {
      login: () => t("auth.login"),
      logout: () => t("auth.logout"),
      settings: () => t("auth.settings"),
      pleaseLoginFirst: () => t("auth.pleaseLoginFirst"),
    },
    publication: {
      postMode: () => t("publication.postMode"),
      fileMode: () => t("publication.fileMode"),
      publish: () => t("publication.publish"),
      publishing: () => t("publication.publishing"),
      writeSomething: () => t("publication.writeSomething"),
      publishSuccess: () => t("publication.publishSuccess"),
      publishFailed: () => t("publication.publishFailed"),
      clickToSelectFile: () => t("publication.clickToSelectFile"),
      supportedFileTypes: () => t("publication.supportedFileTypes"),
      addFileDescription: () => t("publication.addFileDescription"),
      editFileDescription: () => t("publication.editFileDescription"),
      saveChanges: () => t("publication.saveChanges"),
      saving: () => t("publication.saving"),
      signedCannotEdit: () => t("publication.signedCannotEdit"),
      cancel: () => t("publication.cancel"),
      signed: () => t("publication.signed"),
      unsigned: () => t("publication.unsigned"),
      sign: () => t("publication.sign"),
      signedCannotEditMessage: () => t("publication.signedCannotEditMessage"),
      noContent: () => t("publication.noContent"),
      loadFailed: () => t("publication.loadFailed"),
      // 新增的翻译项
      quoteCopied: () => t("publication.quoteCopied"),
      copyFailed: () => t("publication.copyFailed"),
      contentCannotBeEmpty: () => t("publication.contentCannotBeEmpty"),
      quotePublish: () => t("publication.quotePublish"),
      viewComments: () => t("publication.viewComments"),
      quote: () => t("publication.quote"),
      edit: () => t("publication.edit"),
      delete: () => t("publication.delete"),
      unknownNode: () => t("publication.unknownNode"),
      unknownFile: () => t("publication.unknownFile"),
      unknownType: () => t("publication.unknownType"),
      fileType: () => t("publication.fileType"),
      fileSize: () => t("publication.fileSize"),
      downloadFile: () => t("publication.downloadFile"),
      browserNotSupportVideo: () => t("publication.browserNotSupportVideo"),
    },
    comment: {
      addComment: () => t("comment.addComment"),
      publishComment: () => t("comment.publishComment"),
      emailAuth: () => t("comment.emailAuth"),
      ethereumAuth: () => t("comment.ethereumAuth"),
      walletConnectedMessage: () => t("comment.walletConnectedMessage"),
      walletNotConnectedMessage: () => t("comment.walletNotConnectedMessage"),
      displayName: () => t("comment.displayName"),
      displayNamePlaceholder: () => t("comment.displayNamePlaceholder"),
      emailAddress: () => t("comment.emailAddress"),
      emailPlaceholder: () => t("comment.emailPlaceholder"),
      commentContent: () => t("comment.commentContent"),
      commentPlaceholder: () => t("comment.commentPlaceholder"),
      submitComment: () => t("comment.submitComment"),
      submitting: () => t("comment.submitting"),
      required: () => t("comment.required"),
      commentSubmitSuccessShort: () => t("comment.commentSubmitSuccessShort"),
      commentSubmitSuccess: () => t("comment.commentSubmitSuccess"),
      commentDeleteSuccess: () => t("comment.commentDeleteSuccess"),
      commentVerifySuccess: () => t("comment.commentVerifySuccess"),
      verifyingComment: () => t("comment.verifyingComment"),
      deletingComment: () => t("comment.deletingComment"),
      commentVerificationSuccess: () => t("comment.commentVerificationSuccess"),
      commentDeletionSuccess: () => t("comment.commentDeletionSuccess"),
      commentVerifiedVisible: () => t("comment.commentVerifiedVisible"),
      commentDeletedSuccessfully: () => t("comment.commentDeletedSuccessfully"),
    },
    connection: {
      follow: () => t("connection.follow"),
      unfollow: () => t("connection.unfollow"),
      unfollowing: () => t("connection.unfollowing"),
      followSuccess: (url) => t("connection.followSuccess", { url }),
      followFailed: () => t("connection.followFailed"),
      unfollowSuccess: () => t("connection.unfollowSuccess"),
      unfollowFailed: () => t("connection.unfollowFailed"),
      enterNodeUrl: () => t("connection.enterNodeUrl"),
      enterValidUrl: () => t("connection.enterValidUrl"),
      mustBeHttpOrHttps: () => t("connection.mustBeHttpOrHttps"),
      cannotGetNodeInfo: () => t("connection.cannotGetNodeInfo"),
      signatureFailed: () => t("connection.signatureFailed"),
      enterYourNodeUrl: () => t("connection.enterYourNodeUrl"),
      yourNodeUrlPlaceholder: () => t("connection.yourNodeUrlPlaceholder"),
      confirmFollow: () => t("connection.confirmFollow"),
      followers: () => t("connection.followers"),
      following: () => t("connection.following"),
      confirmUnfollow: () => t("connection.confirmUnfollow"),
      confirmUnfollowMessage: (title) =>
        t("connection.confirmUnfollowMessage", { title }),
      onlyNodeOwnerCanUnfollow: () => t("connection.onlyNodeOwnerCanUnfollow"),
      totalFollowers: (count) => t("connection.totalFollowers", count),
      noFollowers: () => t("connection.noFollowers"),
      noFollowersDescription: () => t("connection.noFollowersDescription"),
      noFollowing: () => t("connection.noFollowing"),
      noFollowingDescription: () => t("connection.noFollowingDescription"),
    },
    settings: {
      nodeSettings: () => t("settings.nodeSettings"),
      nodeBasicInfo: () => t("settings.nodeBasicInfo"),
      preferences: () => t("settings.preferences"),
      systemSettings: () => t("settings.systemSettings"),
      language: () => t("settings.language"),
      languageSelect: () => t("settings.languageSelect"),
      languageEnglish: () => t("settings.languageEnglish"),
      languageChinese: () => t("settings.languageChinese"),
      themeSelect: () => t("settings.themeSelect"),
      themeLight: () => t("settings.themeLight"),
      themeDark: () => t("settings.themeDark"),
      themeSystem: () => t("settings.themeSystem"),
      modifyRequiresSignature: () => t("settings.modifyRequiresSignature"),
      nodeUrl: () => t("settings.nodeUrl"),
      nodeUrlPlaceholder: () => t("settings.nodeUrlPlaceholder"),
      nodeUrlHelper: () => t("settings.nodeUrlHelper"),
      edit: () => t("settings.edit"),
      urlEditWarning: () => t("settings.urlEditWarning"),
      nodeTitle: () => t("settings.nodeTitle"),
      nodeTitlePlaceholder: () => t("settings.nodeTitlePlaceholder"),
      nodeDescription: () => t("settings.nodeDescription"),
      nodeDescriptionPlaceholder: () =>
        t("settings.nodeDescriptionPlaceholder"),
      avatar: () => t("settings.avatar"),
      avatarPreview: () => t("settings.avatarPreview"),
      backgroundImage: () => t("settings.backgroundImage"),
      backgroundPreview: () => t("settings.backgroundPreview"),
      supportedFormats: (size) => t("settings.supportedFormats", { size }),
      saveAndBroadcast: () => t("settings.saveAndBroadcast"),
      saving: () => t("settings.saving"),
      nodeInfoSaved: () => t("settings.nodeInfoSaved"),
      saveFailed: () => t("settings.saveFailed"),
      functionSettings: () => t("settings.functionSettings"),
      interfaceLanguage: () => t("settings.interfaceLanguage"),
      selectLanguage: () => t("settings.selectLanguage"),
      selectLanguageHelper: () => t("settings.selectLanguageHelper"),
      enableRSS: () => t("settings.enableRSS"),
      enableRSSHelper: () => t("settings.enableRSSHelper"),
      allowFollow: () => t("settings.allowFollow"),
      allowFollowHelper: () => t("settings.allowFollowHelper"),
      allowComment: () => t("settings.allowComment"),
      allowCommentHelper: () => t("settings.allowCommentHelper"),
      rssSecretKey: () => t("settings.rssSecretKey"),
      rssSecretKeyPlaceholder: () => t("settings.rssSecretKeyPlaceholder"),
      rssSecretKeyHelper: () => t("settings.rssSecretKeyHelper"),
      rssSecretKeyRequired: () => t("settings.rssSecretKeyRequired"),
      theme: () => t("settings.theme"),
      themeHelper: () => t("settings.themeHelper"),
      saveSettings: () => t("settings.saveSettings"),
      settingsSaved: () => t("settings.settingsSaved"),
      urlRequired: () => t("settings.urlRequired"),
      urlFormatIncorrect: () => t("settings.urlFormatIncorrect"),
      titleRequired: () => t("settings.titleRequired"),
      pleaseLoginFirst: () => t("settings.pleaseLoginFirst"),

      // Token 生成
      generateToken: () => t("settings.generateToken"),
      generateTokenHelper: () => t("settings.generateTokenHelper"),
      selectPermissions: () => t("settings.selectPermissions"),
      selectPermissionsHelper: () => t("settings.selectPermissionsHelper"),
      expirationTime: () => t("settings.expirationTime"),
      expirationTimeHelper: () => t("settings.expirationTimeHelper"),
      expirationTimePlaceholder: () => t("settings.expirationTimePlaceholder"),
      generateTokenButton: () => t("settings.generateTokenButton"),
      generating: () => t("settings.generating"),
      tokenGenerated: () => t("settings.tokenGenerated"),
      tokenGeneratedHelper: () => t("settings.tokenGeneratedHelper"),
      copyToken: () => t("settings.copyToken"),
      tokenCopied: () => t("settings.tokenCopied"),
      generateFailed: () => t("settings.generateFailed"),
      selectAtLeastOnePermission: () =>
        t("settings.selectAtLeastOnePermission"),
      copyFailed: () => t("settings.copyFailed"),

      // Permission labels
      searchPublications: () => t("settings.searchPublications"),
      fetchPublications: () => t("settings.fetchPublications"),
      createPublications: () => t("settings.createPublications"),
      updatePublications: () => t("settings.updatePublications"),
      deletePublications: () => t("settings.deletePublications"),
      searchComments: () => t("settings.searchComments"),
      fetchComments: () => t("settings.fetchComments"),
      deleteComments: () => t("settings.deleteComments"),
    },
    error: {
      pageNotFound: () => t("error.pageNotFound"),
      pageNotFoundDescription: () => t("error.pageNotFoundDescription"),
      checkUrlOrReturn: () => t("error.checkUrlOrReturn"),
      backToPrevious: () => t("error.backToPrevious"),
      returnToHome: () => t("error.returnToHome"),
    },
    form: {
      urlRequired: () => t("form.urlRequired"),
      urlFormatIncorrect: () => t("form.urlFormatIncorrect"),
      titleRequired: () => t("form.titleRequired"),
      displayNameRequired: () => t("form.displayNameRequired"),
      emailRequired: () => t("form.emailRequired"),
      emailFormatIncorrect: () => t("form.emailFormatIncorrect"),
      commentContentRequired: () => t("form.commentContentRequired"),
    },
    status: {
      confirmed: () => t("status.confirmed"),
      pending: () => t("status.pending"),
      signed: () => t("status.signed"),
      unsigned: () => t("status.unsigned"),
    },
    node: {
      unnamedNode: () => t("node.unnamedNode"),
      noDescription: () => t("node.noDescription"),
    },
    time: {
      followTime: () => t("time.followTime"),
    },
    signature: {
      signatureInfo: () => t("common.signatureInfo"),
      signatureHash: () => t("common.signatureHash"),
      signerAddress: () => t("common.signerAddress"),
      signatureData: () => t("common.signatureData"),
      signatureTime: () => t("common.signatureTime"),
      signatureTimestamp: () => t("common.signatureTimestamp"),
      signatureMessage: () => t("common.signatureMessage"),
      proofOfSource: () => t("common.proofOfSource"),
      statementOfSource: () => t("common.statementOfSource"),
      signature: () => t("common.signature"),
    },
    dialog: {
      info: () => t("dialog.info"),
      confirmOperation: () => t("dialog.confirmOperation"),
      confirmMessage: () => t("dialog.confirmMessage"),
      confirmDelete: () => t("dialog.confirmDelete"),
      deleteMessage: () => t("dialog.deleteMessage"),
      confirmDeleteText: () => t("dialog.confirmDeleteText"),
      confirmEmailDelete: () => t("dialog.confirmEmailDelete"),
      emailDeleteMessage: () => t("dialog.emailDeleteMessage"),
      emailAddress: () => t("dialog.emailAddress"),
      enterEmailAddress: () => t("dialog.enterEmailAddress"),
      enterValidEmail: () => t("dialog.enterValidEmail"),
      emailPlaceholder: () => t("dialog.emailPlaceholder"),
    },
  }
}
